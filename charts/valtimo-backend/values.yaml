# Default values for valtimo-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

tags:
  # -- Deploy a PostgreSQL instance
  postgresql: true
  # -- Deploy a MySQL instance
  mysql: false
  # -- Deploy a Keycloak instance
  keycloak: true

# -- Amount of replicas running the Valtimo-backend
replicaCount: 1

image:
  # -- Domain of the image repository
  repository: ""
  # -- Pull policy for the image
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- Image pull secrets
imagePullSecrets: []
# -- Name override for Valtimo-Backend
nameOverride: ""
# -- String to fully override valitmo-backend.fullname
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # -- If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations for Valtimo-backend pods
podAnnotations: {}

# -- Labels for Valtimo-backend pods
podLabels: {}

podSecurityContext: 
  # -- Set Valtimo-backend's pod security fsGroup
  fsGroup: 2000

securityContext: 
  capabilities:
    # -- Valtimo-backend's container security context capabilities to be dropped
    drop:
    - ALL
  # -- Valtimo-backend's container security context readOnlyRootFilesystem
  readOnlyRootFilesystem: false
  # -- Run Valtimo-backend containers as non-root
  runAsNonRoot: true
  # -- Run Valtimo-backend containers under this user-ID
  runAsUser: 1000

service:
  # -- Valtimo-backend service type
  type: ClusterIP
  # -- Valtimo-backend service port
  port: 80

ingress:
  # -- Expose the Valtimo-backend UI through an ingress
  enabled: false
  # -- Ingress Class which will be used to implement the Ingress
  className: ""
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # -- Ingress hostname
    - host: chart-example.local
      paths:
        # -- Ingress path
        - path: /
          # --  Ingress path type
          pathType: ImplementationSpecific
  # -- Enable TLS for the Ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

livenessProbe:
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 40
  # -- Period seconds for livenessProbe
  periodSeconds: 10
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 1
  # -- Failure threshold for livenessProbe
  failureThreshold: 6
  # -- Success threshold for livenessProbe
  successThreshold: 1

readinessProbe:
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 20
  # -- Period seconds for readinessProbe
  periodSeconds: 10
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 1
  # -- Failure threshold for readinessProbe
  failureThreshold: 6
  # -- Success threshold for readinessProbe
  successThreshold: 1

# -- Resources for Valtimo-backend
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- Enable/disable autoscaling for the Valtimo-backend deployment
  enabled: false
  # -- Minimum replicas for the Valtimo-backend deployment
  minReplicas: 1
  # -- Maximum replicas for the Valtimo-backend deployment
  maxReplicas: 100
  # -- Valtimo-backend Deployment autoscaling target CPU percentage
  targetCPUUtilizationPercentage: 80
  # -- Valtimo-backend Deployment autoscaling target Mem utilization percentage
  targetMemoryUtilizationPercentage: 80

# -- Node labels for Valtimo-backend pods assignment
nodeSelector: {}

# -- Tolerations for Valtimo-backend pods assignment
tolerations: []

# -- Affinity for Valtimo-backend pods assignment 
affinity: {}

# -- Refer to an existing secret to avoid managing secrets through Helm.
existingSecret: null


persistence:
  # -- Enable/disable persistent volumes for Valimo-backend
  enabled: false
  annotations: {}
  # -- persistence.size Size of data volume
  size: 1Gi
  # -- persistence.storageClass Storage class of backing PVC
  # -- If defined, storageClassName: <storageClass>
  # -- If set to "-", storageClassName: "", which disables dynamic provisioning
  # -- If undefined (the default) or set to null, no storageClassName spec is
  # -- set, choosing the default provisioner.  (gp2 on AWS, standard on
  # -- GKE, AWS & OpenStack)
  # --
  storageClass: ""
  # -- persistence.existingClaim The name of an existing PVC to use for persistence
  existingClaim: null
  # -- persistence.mountPath Path to mount the volume at.
  mountPath: /tmp

settings:

  spring: 
    profiles:
      # -- Activated Spring profiles
      active: "cloud"
    actuator: 
      # -- Username to access the Spring actuator endpoint
      username: "admin"
      # -- Password to access the Spring actuator endpoint
      password: ""
    datasource: 
      # -- URL for the database
      url: 
      # -- Username for the database
      username: 
      # -- Password for the database
      password: ""
    
  keycloak: 
    # -- URL of Keycloak
    authServerURL: 
    # -- Keycloak realm
    realm: 
    # -- Client-ID to connect with Keycloak
    clientID: 
    # -- Client-Secret to connect with Keycloak
    clientSecret: ""
    # -- Keycloak's Public Key used to verify signature of JWTs
    publicKey: 

  valtimo: 
    # -- Type of database to use (can by either 'postgres' or 'mysql')
    databaseType: "postgres"
    # -- The hostname which exposes Valtimo-backend
    appHostName: 
    # -- The port on which Valtimo-backend is listening
    serverPort: 8080
    # -- Encryption secret
    connectorEncryptionSecret: ""

  camunda: 
    # -- Default Camunda admin user
    adminUserID: "admin"
    # -- Default Camunda admin password
    adminUserPassword: ""

##########################################################################
## PostgreSQL subchart                                                  ##
## https://artifacthub.io/packages/helm/bitnami/postgresql?modal=values ##
##########################################################################
# -- Postgresql subchart by Bitnami. See https://artifacthub.io/packages/helm/bitnami/postgresql?modal=values for all possible values
postgresql:
  auth:
    postgresPassword: ""
    existingSecret: ""
    secretKeys:
      adminPasswordKey: ""
      userPasswordKey: ""
      replicationPasswordKey: ""

########################################################################
## MySQL subchart                                                     ##
## https://artifacthub.io/packages/helm/bitnami/mysql?modal=values    ##
########################################################################
# -- MySQL subchart by Bitnami. See https://artifacthub.io/packages/helm/bitnami/mysql?modal=values for all possible values
mysql:
  auth:
    rootPassword: ""
    existingSecret: ""

########################################################################
## Keycloak subchart                                                  ##
## https://artifacthub.io/packages/helm/bitnami/keycloak?modal=values ##
########################################################################
# -- Keycloak subchart by Bitnami. See https://artifacthub.io/packages/helm/bitnami/keycloak?modal=values for all possible values
keycloak: 
  auth:
    adminUser: user
    adminPassword: ""
    existingSecret: ""